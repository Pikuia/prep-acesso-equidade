# -*- coding: utf-8 -*-
"""
PrEP - An√°lise Inteligente de Dados (S√£o Paulo)
Vers√£o Simplificada com Machine Learning Integrado
"""

import streamlit as st
import pandas as pd
import numpy as np
from pathlib import Path
import sqlite3
from datetime import datetime
import matplotlib.pyplot as plt
import plotly.express as px
from sklearn.ensemble import RandomForestClassifier
from sklearn.cluster import KMeans
import warnings
warnings.filterwarnings('ignore')

# ======================= CONFIGURA√á√ÉO =======================
st.set_page_config(page_title="PrEP - Pesquisa Inteligente", page_icon="‚ù§Ô∏è", layout="wide")

# ======================= TERMO DE CONSENTIMENTO =======================
def mostrar_termo_consentimento():
    st.markdown("""
    ## TERMO DE CONSENTIMENTO LIVRE E ESCLARECIDO
    
    **Objetivo da Pesquisa:** 
    Esta pesquisa visa entender o conhecimento e uso da PrEP/PEP na popula√ß√£o de S√£o Paulo, 
    identificando gaps de acesso e representa√ß√£o para melhorar as pol√≠ticas p√∫blicas.
    
    **Respons√°vel pela pesquisa:** 
    Weslei - Projeto PrEP S√£o Paulo
    
    **Descri√ß√£o:** 
    Voc√™ est√° sendo convidado(a) para participar da pesquisa sobre preven√ß√£o ao HIV. 
    Buscamos entender como as pessoas conhecem e acessam m√©todos como PrEP e PEP.
    
    **Riscos e benef√≠cios:** 
    N√£o existem riscos associados a este estudo. Os benef√≠cios incluem contribuir para 
    melhorias nas pol√≠ticas de preven√ß√£o ao HIV em nossa cidade.
    
    **Direitos do participante:** 
    - Sua participa√ß√£o √© volunt√°ria
    - Voc√™ pode desistir a qualquer momento
    - Seus dados ser√£o mantidos em sigilo
    - N√£o haver√° gastos ou ganhos financeiros
    
    **Ao clicar em "Aceito participar", voc√™ concorda com estes termos.**
    """)
    
    if st.button("‚úÖ Aceito participar"):
        st.session_state.termo_aceito = True
        st.rerun()
    
    if st.button("‚ùå Recusar"):
        st.stop()
    
    return False

# ======================= BANCO DE DADOS =======================
def criar_banco():
    conn = sqlite3.connect('pesquisa_prep.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS respostas (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        data TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        idade TEXT,
        genero TEXT,
        orientacao_sexual TEXT,
        raca TEXT,
        escolaridade TEXT,
        renda TEXT,
        regiao TEXT,
        conhecimento_prep TEXT,
        uso_prep TEXT,
        acesso_servico TEXT,
        comentarios TEXT
    )
    ''')
    
    conn.commit()
    conn.close()

def salvar_resposta(resposta):
    conn = sqlite3.connect('pesquisa_prep.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    INSERT INTO respostas 
    (idade, genero, orientacao_sexual, raca, escolaridade, renda, regiao, 
     conhecimento_prep, uso_prep, acesso_servico, comentarios)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', tuple(resposta.values()))
    
    conn.commit()
    conn.close()

# ======================= CARREGAR DADOS PR√âP =======================
@st.cache_data
def carregar_dados_prep():
    try:
        # Carrega dados de usu√°rios da PrEP
        df_usuarios = pd.read_csv('data/Banco_PrEP_usuarios.csv', encoding='utf-8')
        
        # Carrega dados de dispensas
        df_dispensas1 = pd.read_csv('data/Banco_PrEP_dispensas_1.csv', encoding='utf-8')
        df_dispensas2 = pd.read_csv('data/Banco_PrEP_dispensas_2.csv', encoding='utf-8')
        df_dispensas = pd.concat([df_dispensas1, df_dispensas2], ignore_index=True)
        
        return df_usuarios, df_dispensas
    except Exception as e:
        st.error(f"Erro ao carregar dados: {e}")
        return pd.DataFrame(), pd.DataFrame()

# ======================= MACHINE LEARNING =======================
def analise_machine_learning(df):
    st.subheader("ü§ñ An√°lise com Machine Learning")
    
    # An√°lise por Idade
    st.write("**Distribui√ß√£o por Idade**")
    if 'idade' in df.columns:
        fig = px.histogram(df, x='idade', title="Distribui√ß√£o por Faixa Et√°ria")
        st.plotly_chart(fig)
    
    # An√°lise por G√™nero
    st.write("**Distribui√ß√£o por G√™nero**")
    if 'genero' in df.columns:
        contagem_genero = df['genero'].value_counts()
        fig = px.pie(values=contagem_genero.values, names=contagem_genero.index, title="Distribui√ß√£o por G√™nero")
        st.plotly_chart(fig)
    
    # An√°lise por Ra√ßa/Cor
    st.write("**Distribui√ß√£o por Ra√ßa/Cor**")
    if 'raca' in df.columns:
        contagem_raca = df['raca'].value_counts()
        fig = px.bar(x=contagem_raca.index, y=contagem_raca.values, title="Distribui√ß√£o por Ra√ßa/Cor")
        st.plotly_chart(fig)

def criar_relatorio(df):
    st.subheader("üìä Relat√≥rio Autom√°tico")
    
    # Estat√≠sticas b√°sicas
    st.write(f"**Total de participantes:** {len(df)}")
    
    if len(df) > 0:
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("Conhecem PrEP", 
                     df[df['conhecimento_prep'].str.contains('Sim', na=False)].shape[0])
        
        with col2:
            st.metric("J√° usaram PrEP", 
                     df[df['uso_prep'].str.contains('Sim', na=False)].shape[0])
        
        with col3:
            st.metric("T√™m acesso f√°cil", 
                     df[df['acesso_servico'].str.contains('Sim', na=False)].shape[0])

# ======================= PESQUISA =======================
def mostrar_pesquisa():
    st.header("üìù Pesquisa - Conhecimento sobre PrEP/PEP")
    
    with st.form("formulario_pesquisa"):
        st.subheader("Dados Pessoais")
        
        col1, col2 = st.columns(2)
        
        with col1:
            idade = st.selectbox("Idade", 
                               ["18-24", "25-34", "35-44", "45-54", "55+"])
            
            genero = st.selectbox("G√™nero",
                                ["Masculino", "Feminino", "N√£o-bin√°rio", "Transg√™nero", "Prefiro n√£o informar"])
            
            orientacao = st.selectbox("Orienta√ß√£o Sexual",
                                    ["Heterossexual", "Homossexual", "Bissexual", "Pansexual", "Assexual", "Prefiro n√£o informar"])
        
        with col2:
            raca = st.selectbox("Ra√ßa/Cor",
                              ["Branca", "Preta", "Parda", "Amarela", "Ind√≠gena", "Prefiro n√£o informar"])
            
            escolaridade = st.selectbox("Escolaridade",
                                      ["Fundamental", "M√©dio", "Superior", "P√≥s-gradua√ß√£o"])
            
            renda = st.selectbox("Renda Mensal",
                               ["At√© 1 sal√°rio", "1-2 sal√°rios", "2-5 sal√°rios", "Mais de 5 sal√°rios"])
        
        st.subheader("Sobre PrEP/PEP")
        
        conhecimento = st.radio("Voc√™ conhece a PrEP?",
                              ["Sim, conhe√ßo bem", "J√° ouvi falar", "N√£o conhe√ßo"])
        
        uso = st.radio("Voc√™ j√° usou PrEP?",
                     ["Sim, uso atualmente", "J√° usei no passado", "Nunca usei"])
        
        acesso = st.radio("Sabe onde conseguir PrEP gratuitamente?",
                        ["Sim", "N√£o", "Talvez"])
        
        comentarios = st.text_area("Coment√°rios ou sugest√µes")
        
        if st.form_submit_button("Enviar Resposta"):
            resposta = {
                'idade': idade,
                'genero': genero,
                'orientacao_sexual': orientacao,
                'raca': raca,
                'escolaridade': escolaridade,
                'renda': renda,
                'regiao': "S√£o Paulo",
                'conhecimento_prep': conhecimento,
                'uso_prep': uso,
                'acesso_servico': acesso,
                'comentarios': comentarios
            }
            
            salvar_resposta(resposta)
            st.success("‚úÖ Resposta salva com sucesso!")

# ======================= DADOS PR√âP =======================
def mostrar_dados_prep():
    st.header("üìà Dados Oficiais da PrEP")
    
    df_usuarios, df_dispensas = carregar_dados_prep()
    
    if not df_usuarios.empty:
        st.subheader("Dados de Usu√°rios da PrEP")
        st.dataframe(df_usuarios.head(10))
        
        # An√°lise r√°pida
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**Total de usu√°rios:**", len(df_usuarios))
            if 'raca4_cat' in df_usuarios.columns:
                st.write("**Distribui√ß√£o racial:**")
                st.write(df_usuarios['raca4_cat'].value_counts())
        
        with col2:
            if 'fetar' in df_usuarios.columns:
                st.write("**Distribui√ß√£o por idade:**")
                st.write(df_usuarios['fetar'].value_counts())
    
    if not df_dispensas.empty:
        st.subheader("Dados de Dispensa√ß√£o")
        st.dataframe(df_dispensas.head(10))

# ======================= PAINEL PRINCIPAL =======================
def main():
    st.title("‚ù§Ô∏è PrEP - Pesquisa Inteligente S√£o Paulo")
    
    # Verificar termo de consentimento
    if 'termo_aceito' not in st.session_state:
        st.session_state.termo_aceito = False
    
    if not st.session_state.termo_aceito:
        mostrar_termo_consentimento()
        return
    
    # Menu lateral
    menu = st.sidebar.selectbox("Navega√ß√£o", 
                               ["üè† In√≠cio", "üìù Fazer Pesquisa", "ü§ñ An√°lise dos Dados", "üìä Dados PrEP"])
    
    # Criar banco se n√£o existir
    criar_banco()
    
    if menu == "üè† In√≠cio":
        st.header("Bem-vindo √† Pesquisa PrEP!")
        st.markdown("""
        Esta pesquisa ajuda a entender como a PrEP est√° sendo conhecida e usada em S√£o Paulo.
        
        **Como participar:**
        1. Clique em "Fazer Pesquisa" no menu
        2. Responda as perguntas (leva 5 minutos)
        3. Veja os resultados em tempo real
        
        **Objetivos:**
        - Identificar gaps de conhecimento
        - Melhorar o acesso √† PrEP
        - Direcionar pol√≠ticas p√∫blicas
        """)
        
    elif menu == "üìù Fazer Pesquisa":
        mostrar_pesquisa()
        
    elif menu == "ü§ñ An√°lise dos Dados":
        # Carregar respostas do banco
        conn = sqlite3.connect('pesquisa_prep.db')
        df_respostas = pd.read_sql_query("SELECT * FROM respostas", conn)
        conn.close()
        
        if len(df_respostas) > 0:
            analise_machine_learning(df_respostas)
            criar_relatorio(df_respostas)
            
            # Mostrar dados brutos
            with st.expander("Ver todas as respostas"):
                st.dataframe(df_respostas)
        else:
            st.info("Ainda n√£o h√° respostas. Fa√ßa a pesquisa primeiro!")
            
    elif menu == "üìä Dados PrEP":
        mostrar_dados_prep()

if __name__ == "__main__":
    main()