#!/usr/bin/env python3
# analise_simulacao.py - An√°lise dos dados simulados

import sqlite3
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

def analisar_dados_simulados():
    """An√°lise completa dos dados simulados"""
    print("üìä AN√ÅLISE DOS DADOS SIMULADOS")
    print("=" * 50)
    
    # Conectar ao banco
    conn = sqlite3.connect('pesquisa_prep.db')
    df = pd.read_sql("SELECT * FROM respostas", conn)
    conn.close()
    
    print(f"üìà Total de respostas: {len(df)}")
    print(f"üìÖ Per√≠odo: {df['data_envio'].min()} at√© {df['data_envio'].max()}")
    print()
    
    # An√°lise por categoria
    categorias = {
        'Conhecimento sobre PrEP': 'conhecimento_prep',
        'Escolaridade': 'escolaridade', 
        'Renda': 'renda',
        'Faixa Et√°ria': 'idade',
        'G√™nero': 'genero',
        'Ra√ßa/Cor': 'raca',
        'Uso da PrEP': 'uso_prep',
        'Acesso ao Servi√ßo': 'acesso_servico'
    }
    
    for titulo, coluna in categorias.items():
        print(f"üîç {titulo}:")
        contagem = df[coluna].value_counts()
        total = len(df)
        
        for valor, count in contagem.items():
            porcentagem = (count / total) * 100
            print(f"   {valor}: {count} ({porcentagem:.1f}%)")
        print()
    
    # An√°lise de percep√ß√£o de risco
    print("üéØ Percep√ß√£o de Risco (0-10):")
    risco_stats = df['percepcao_risco'].describe()
    print(f"   M√©dia: {risco_stats['mean']:.1f}")
    print(f"   Mediana: {risco_stats['50%']:.1f}")
    print(f"   M√≠nimo: {risco_stats['min']:.0f}")
    print(f"   M√°ximo: {risco_stats['max']:.0f}")
    print()
    
    # An√°lise de barreiras mais comuns
    print("üöß Barreiras mais mencionadas:")
    todas_barreiras = []
    for barreiras in df['barreiras'].dropna():
        if barreiras:
            todas_barreiras.extend([b.strip() for b in barreiras.split(',')])
    
    from collections import Counter
    contador_barreiras = Counter(todas_barreiras)
    
    for barreira, count in contador_barreiras.most_common(10):
        if barreira:
            porcentagem = (count / len(df)) * 100
            print(f"   {barreira}: {count} ({porcentagem:.1f}%)")
    print()
    
    # An√°lise cruzada: Conhecimento x Escolaridade
    print("üîÑ Conhecimento sobre PrEP por Escolaridade:")
    crosstab = pd.crosstab(df['escolaridade'], df['conhecimento_prep'], normalize='index') * 100
    print(crosstab.round(1))
    print()
    
    # An√°lise cruzada: Conhecimento x Renda
    print("üîÑ Conhecimento sobre PrEP por Renda:")
    crosstab2 = pd.crosstab(df['renda'], df['conhecimento_prep'], normalize='index') * 100
    print(crosstab2.round(1))
    print()
    
    # Coment√°rios mais comuns
    print("üí¨ Coment√°rios mais comuns:")
    comentarios = df['comentarios'].dropna()
    comentarios_nao_vazios = comentarios[comentarios != '']
    
    if len(comentarios_nao_vazios) > 0:
        contador_comentarios = Counter(comentarios_nao_vazios)
        for comentario, count in contador_comentarios.most_common(8):
            print(f"   '{comentario}': {count}x")
    else:
        print("   Nenhum coment√°rio espec√≠fico encontrado")
    print()
    
    # Insights principais
    print("üí° INSIGHTS PRINCIPAIS:")
    print("-" * 30)
    
    # Conhecimento
    nao_conhece = (df['conhecimento_prep'] == 'N√£o').sum()
    total = len(df)
    perc_nao_conhece = (nao_conhece / total) * 100
    print(f"‚Ä¢ {perc_nao_conhece:.1f}% N√ÉO conhecem a PrEP")
    
    # Escolaridade baixa
    esc_baixa = df['escolaridade'].isin(['Fundamental', 'M√©dio']).sum()
    perc_esc_baixa = (esc_baixa / total) * 100
    print(f"‚Ä¢ {perc_esc_baixa:.1f}% t√™m ensino fundamental ou m√©dio")
    
    # Renda baixa
    renda_baixa = df['renda'].isin(['At√© 1 sal√°rio', '1-3 sal√°rios']).sum()
    perc_renda_baixa = (renda_baixa / total) * 100
    print(f"‚Ä¢ {perc_renda_baixa:.1f}% t√™m renda de at√© 3 sal√°rios")
    
    # Acesso
    nao_sabe_acesso = (df['acesso_servico'] == 'N√£o').sum()
    perc_nao_acesso = (nao_sabe_acesso / total) * 100
    print(f"‚Ä¢ {perc_nao_acesso:.1f}% N√ÉO sabem onde encontrar PrEP")
    
    # Percep√ß√£o de risco baixa
    risco_baixo = (df['percepcao_risco'] <= 3).sum()
    perc_risco_baixo = (risco_baixo / total) * 100
    print(f"‚Ä¢ {perc_risco_baixo:.1f}% t√™m percep√ß√£o de risco baixa (‚â§3)")
    
    print()
    print("‚úÖ An√°lise conclu√≠da!")
    print("Os dados simulados refletem o perfil solicitado:")
    print("- Baixa renda e escolaridade")
    print("- Pouco conhecimento sobre PrEP")
    print("- Dificuldade de acesso a informa√ß√µes")

if __name__ == "__main__":
    try:
        analisar_dados_simulados()
    except Exception as e:
        print(f"Erro na an√°lise: {e}")
        import traceback
        traceback.print_exc()