"""
PrEP - An√°lise Inteligente de Dados
Vers√£o Aprimorada com An√°lises Geogr√°ficas, Temporais e de Texto.
"""
import streamlit as st
import pandas as pd
import sqlite3
import plotly.express as px
from sklearn.cluster import KMeans
from sklearn.preprocessing import OneHotEncoder
from sklearn.ensemble import RandomForestClassifier
import warnings
import folium
from streamlit_folium import st_folium
from wordcloud import WordCloud
import matplotlib.pyplot as plt
import requests

warnings.filterwarnings('ignore')

# ======================= CONFIGURA√á√ÉO DA P√ÅGINA =======================
st.set_page_config(page_title="PrEP - Pesquisa Inteligente", page_icon="‚ù§Ô∏è", layout="wide")

# ======================= BANCO DE DADOS DA PESQUISA =======================
def criar_banco():
    conn = sqlite3.connect('pesquisa_prep.db', timeout=20)
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS respostas (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        data_resposta TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        idade TEXT, genero TEXT, raca TEXT, escolaridade TEXT, renda TEXT,
        conhece_prep TEXT, usou_prep TEXT, acesso_facil TEXT,
        fonte_info TEXT, barreiras TEXT, percepcao_risco TEXT, comentarios TEXT
    )
    ''')
    conn.commit()
    conn.close()

def salvar_resposta(resposta):
    conn = sqlite3.connect('pesquisa_prep.db', timeout=20)
    cursor = conn.cursor()
    cursor.execute('''
    INSERT INTO respostas (idade, genero, raca, escolaridade, renda, conhece_prep, 
                           usou_prep, acesso_facil, fonte_info, barreiras, 
                           percepcao_risco, comentarios)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', tuple(resposta.values()))
    conn.commit()
    conn.close()

# ======================= CARREGAMENTO DOS DADOS P√öBLICOS =======================
@st.cache_data(ttl=3600)
def carregar_dados_prep():
    try:
        df_usuarios = pd.read_csv('data/Banco_PrEP_usuarios.csv', encoding='utf-8')
        df_dispensas = pd.read_csv('data/Banco_PrEP_dispensas.csv', encoding='utf-8')
        return df_usuarios, df_dispensas
    except FileNotFoundError:
        st.error("Erro: Arquivos de dados n√£o encontrados. Certifique-se de que a pasta 'data' existe e cont√©m os arquivos necess√°rios.")
        return pd.DataFrame(), pd.DataFrame()

@st.cache_data(ttl=3600)
def carregar_dados_hiv():
    try:
        # Leitura inteligente do arquivo Excel, pulando as linhas iniciais de cabe√ßalho
        df_aids = pd.read_excel('data/indicadoresAids.xls', sheet_name='Boletim', header=6)
        return df_aids
    except FileNotFoundError:
        st.error("Erro: Arquivo 'indicadoresAids.xls' n√£o encontrado na pasta 'data'.")
        return pd.DataFrame()
    except Exception as e:
        st.error(f"Ocorreu um erro ao ler o arquivo de indicadores de AIDS: {e}")
        return pd.DataFrame()

# ======================= M√ìDULOS DE AN√ÅLISE =======================

def gerar_nuvem_palavras(df_pesquisa):
    st.subheader("üí≠ Nuvem de Palavras dos Coment√°rios")
    texto_comentarios = ' '.join(df_pesquisa['comentarios'].dropna().astype(str))

    if not texto_comentarios.strip():
        st.warning("Ainda n√£o h√° coment√°rios suficientes para gerar a nuvem de palavras.")
        return

    # Lista de stopwords em portugu√™s
    stopwords = set(['de', 'a', 'o', 'que', 'e', 'do', 'da', 'em', 'um', 'para', '√©', 'com', 'n√£o', 'uma', 'os', 'no', 'se', 'na', 'por', 'mais', 'as', 'dos', 'como', 'mas', 'foi', 'ao', 'ele', 'das', 'tem', '√†', 'seu', 'sua'])

    try:
        wordcloud = WordCloud(width=800, height=400, background_color='white', colormap='viridis', stopwords=stopwords).generate(texto_comentarios)
        fig, ax = plt.subplots(figsize=(10, 5))
        ax.imshow(wordcloud, interpolation='bilinear')
        ax.axis('off')
        st.pyplot(fig)
    except Exception as e:
        st.error(f"N√£o foi poss√≠vel gerar a nuvem de palavras: {e}")

def grafico_tendencia_temporal(df_dispensas):
    st.subheader("üìà Tend√™ncia Temporal de Dispensas de PrEP")
    df_temporal = df_dispensas.copy()
    df_temporal['dt_disp'] = pd.to_datetime(df_temporal['dt_disp'], errors='coerce')
    df_temporal.dropna(subset=['dt_disp'], inplace=True)
    df_temporal['ano_mes'] = df_temporal['dt_disp'].dt.to_period('M').astype(str)
    
    contagem_mensal = df_temporal.groupby('ano_mes').size().reset_index(name='contagem')
    contagem_mensal = contagem_mensal.sort_values('ano_mes')
    
    fig = px.line(contagem_mensal, x='ano_mes', y='contagem', title='Evolu√ß√£o Mensal de Dispensas de PrEP', labels={'ano_mes': 'M√™s', 'contagem': 'N√∫mero de Dispensas'}, markers=True)
    st.plotly_chart(fig, use_container_width=True)

@st.cache_resource
def get_geojson():
    url_geojson = 'https://raw.githubusercontent.com/luizbd/mapa-brasil-estado/master/estados.json'
    response = requests.get(url_geojson)
    return response.json()

def mapa_geografico(df_usuarios):
    st.subheader("üó∫Ô∏è Mapa de Calor de Usu√°rios de PrEP no Brasil")
    st.info("O mapa abaixo exibe a concentra√ß√£o de usu√°rios de PrEP por estado. As cores mais intensas indicam um maior n√∫mero de usu√°rios.")
    
    contagem_estados = df_usuarios['UF_UDM'].value_counts().reset_index()
    contagem_estados.columns = ['estado', 'usuarios']
    
    try:
        geojson_brasil = get_geojson()
        
        m = folium.Map(location=[-14.2350, -51.9253], zoom_start=4, tiles='CartoDB positron')
        
        folium.Choropleth(
            geo_data=geojson_brasil,
            name='choropleth',
            data=contagem_estados,
            columns=['estado', 'usuarios'],
            key_on='feature.properties.sigla',
            fill_color='YlOrRd',
            fill_opacity=0.8,
            line_opacity=0.2,
            legend_name='N√∫mero de Usu√°rios de PrEP por Estado'
        ).add_to(m)
        
        st_folium(m, width=725, height=500)
    except Exception as e:
        st.error(f"N√£o foi poss√≠vel gerar o mapa geogr√°fico: {e}")


# ======================= P√ÅGINAS DA APLICA√á√ÉO =======================

def pagina_inicio():
    st.title("Plataforma de Pesquisa e An√°lise sobre PrEP ‚ù§Ô∏è")
    st.markdown("""
    Esta √© uma ferramenta para coletar e analisar dados sobre o conhecimento e acesso √† PrEP no Brasil. 
    Sua participa√ß√£o √© fundamental para entendermos o cen√°rio atual e ajudarmos a aprimorar as pol√≠ticas de sa√∫de.
    
    **Como funciona?**
    - **Realizar Pesquisa:** Participe do nosso question√°rio an√¥nimo. Leva menos de 5 minutos!
    - **An√°lise da Pesquisa:** Veja os resultados da pesquisa em tempo real, com gr√°ficos interativos.
    - **Dados Oficiais:** Explore os dados p√∫blicos do Minist√©rio da Sa√∫de sobre o uso de PrEP e os indicadores de HIV/AIDS.
    
    Use o menu na barra lateral para navegar entre as se√ß√µes.
    """)

def pagina_pesquisa():
    st.title("üìù Pesquisa - Conhecimento sobre PrEP/PEP")
    st.info("Por favor, responda √†s perguntas abaixo. Suas respostas s√£o an√¥nimas e muito importantes.")
    with st.form("formulario_pesquisa"):
        # Se√ß√£o 1: Perfil Demogr√°fico
        st.subheader("1. Perfil Demogr√°fico")
        idade = st.selectbox("Qual sua faixa et√°ria?", ["18-24 anos", "25-34 anos", "35-44 anos", "45-54 anos", "55+ anos", "Prefiro n√£o informar"])
        genero = st.selectbox("Com qual g√™nero voc√™ se identifica?", ["Homem Cis", "Mulher Cis", "Homem Trans", "Mulher Trans", "N√£o-bin√°rio", "Prefiro n√£o informar"])
        raca = st.selectbox("Como voc√™ se autodeclara em rela√ß√£o √† ra√ßa/cor?", ["Branca", "Preta", "Parda", "Amarela", "Ind√≠gena", "Prefiro n√£o informar"])
        escolaridade = st.selectbox("Qual seu n√≠vel de escolaridade?", ["Ensino Fundamental", "Ensino M√©dio", "Ensino Superior", "P√≥s-gradua√ß√£o", "Prefiro n√£o informar"])
        renda = st.selectbox("Qual sua renda familiar mensal?", ["At√© 1 sal√°rio m√≠nimo", "Entre 1 e 3 sal√°rios", "Entre 3 e 5 sal√°rios", "Acima de 5 sal√°rios", "Prefiro n√£o informar"])
        
        # Se√ß√£o 2: Conhecimento e Acesso
        st.subheader("2. Conhecimento e Acesso √† PrEP")
        conhece_prep = st.radio("Voc√™ j√° ouviu falar sobre a PrEP?", ["Sim, conhe√ßo bem", "J√° ouvi falar superficialmente", "Nunca ouvi falar"])
        usou_prep = st.radio("Voc√™ j√° utilizou ou utiliza a PrEP?", ["Sim, uso atualmente", "J√° usei no passado", "Nunca usei, mas tenho interesse", "Nunca usei e n√£o tenho interesse"])
        acesso_facil = st.radio("Voc√™ sabe onde encontrar a PrEP gratuitamente?", ["Sim", "N√£o", "Tenho d√∫vidas"])
        
        # Se√ß√£o 3: Percep√ß√µes e Barreiras
        st.subheader("3. Percep√ß√µes e Barreiras")
        fonte_info = st.selectbox("Onde voc√™ mais ouviu falar sobre PrEP?", ["Profissionais de sa√∫de", "Amigos ou parceiros(as)", "Redes sociais (Instagram, TikTok, etc.)", "M√≠dia tradicional (TV, r√°dio)", "Sites de busca (Google)", "N√£o ouvi falar"])
        barreiras = st.selectbox("Na sua opini√£o, qual a maior dificuldade para as pessoas usarem a PrEP?", ["Falta de informa√ß√£o", "Medo de efeitos colaterais", "Vergonha ou estigma", "Dificuldade de acesso ao servi√ßo de sa√∫de", "Acho que n√£o preciso", "Outro"])
        percepcao_risco = st.radio("Como voc√™ avalia seu risco pessoal de contrair HIV atualmente?", ["Alto", "M√©dio", "Baixo", "Nenhum", "N√£o sei avaliar"])
        
        comentarios = st.text_area("Se quiser, deixe um coment√°rio, sugest√£o ou relate sua experi√™ncia:")
        
        submitted = st.form_submit_button("‚úÖ Enviar Resposta")
        if submitted:
            resposta = {
                'idade': idade, 'genero': genero, 'raca': raca, 'escolaridade': escolaridade, 'renda': renda,
                'conhece_prep': conhece_prep, 'usou_prep': usou_prep, 'acesso_facil': acesso_facil,
                'fonte_info': fonte_info, 'barreiras': barreiras, 'percepcao_risco': percepcao_risco,
                'comentarios': comentarios
            }
            salvar_resposta(resposta)
            st.success("Obrigado! Sua resposta foi registrada com sucesso.")

def pagina_analise_pesquisa():
    st.title("üìä An√°lise da Pesquisa (Resultados em Tempo Real)")
    conn = sqlite3.connect('pesquisa_prep.db')
    try:
        df_respostas = pd.read_sql_query("SELECT * FROM respostas", conn)
    except pd.io.sql.DatabaseError:
        st.warning("O banco de dados da pesquisa est√° sendo criado. Responda √† pesquisa para come√ßar a ver os dados.")
        return
    finally:
        conn.close()

    if df_respostas.empty:
        st.info("Ainda n√£o h√° respostas. Seja o primeiro a participar da pesquisa!")
        return

    st.metric("Total de Respostas Coletadas", len(df_respostas))
    
    st.subheader("Recorte por Perfil Demogr√°fico")
    col1, col2 = st.columns(2)
    with col1:
        fig_idade = px.pie(df_respostas, names='idade', title='Distribui√ß√£o por Idade')
        st.plotly_chart(fig_idade, use_container_width=True)
        fig_raca = px.pie(df_respostas, names='raca', title='Distribui√ß√£o por Ra√ßa/Cor')
        st.plotly_chart(fig_raca, use_container_width=True)
    with col2:
        fig_genero = px.pie(df_respostas, names='genero', title='Distribui√ß√£o por G√™nero')
        st.plotly_chart(fig_genero, use_container_width=True)
        fig_escolaridade = px.pie(df_respostas, names='escolaridade', title='Distribui√ß√£o por Escolaridade')
        st.plotly_chart(fig_escolaridade, use_container_width=True)
        
    gerar_nuvem_palavras(df_respostas)


def pagina_dados_oficiais():
    st.title("üìà Dados Oficiais sobre PrEP e HIV/AIDS no Brasil")
    
    df_usuarios, df_dispensas = carregar_dados_prep()
    
    if df_usuarios.empty or df_dispensas.empty:
        return

    # Filtro para S√£o Paulo
    apenas_sp = st.checkbox("Mostrar apenas dados de PrEP de S√£o Paulo (SP)")
    if apenas_sp:
        df_usuarios = df_usuarios[df_usuarios['UF_UDM'] == 'SP']
        df_dispensas = df_dispensas[df_dispensas['UF_UDM'] == 'SP']

    tab1, tab2, tab3, tab4, tab5 = st.tabs(["Perfil dos Usu√°rios", "Dispensas de PrEP", "An√°lise Geogr√°fica e Temporal", "An√°lise Avan√ßada (ML)", "Indicadores Nacionais de AIDS"])

    with tab1:
        st.header("An√°lise Detalhada do Perfil dos Usu√°rios de PrEP")
        st.dataframe(df_usuarios.head())
        # Gr√°ficos de Perfil
        col1, col2 = st.columns(2)
        with col1:
            fig_raca_prep = px.pie(df_usuarios, names='raca4_cat', title='Perfil Racial dos Usu√°rios de PrEP')
            st.plotly_chart(fig_raca_prep, use_container_width=True)
        with col2:
            fig_idade_prep = px.pie(df_usuarios, names='fetar', title='Perfil Et√°rio dos Usu√°rios de PrEP')
            st.plotly_chart(fig_idade_prep, use_container_width=True)

    with tab2:
        st.header("An√°lise Detalhada das Dispensas de PrEP")
        st.dataframe(df_dispensas.head())
        fig_servico = px.pie(df_dispensas, names='tp_servico_atendimento', title='Tipo de Servi√ßo de Atendimento na Dispensa√ß√£o')
        st.plotly_chart(fig_servico, use_container_width=True)
    
    with tab3:
        st.header("An√°lise Geogr√°fica e Temporal")
        grafico_tendencia_temporal(df_dispensas)
        mapa_geografico(df_usuarios)

    with tab4:
        st.header("An√°lise Avan√ßada com Machine Learning")
        st.write("### 1. Identifica√ß√£o de Perfis de Usu√°rios (Clusteriza√ß√£o)")
        try:
            # Prepara√ß√£o dos dados para ML
            df_ml = df_usuarios[['raca4_cat', 'escol4', 'fetar', 'Pop_genero_pratica']].dropna()
            encoder = OneHotEncoder(handle_unknown='ignore')
            X_encoded = encoder.fit_transform(df_ml)
            
            # Clusteriza√ß√£o
            kmeans = KMeans(n_clusters=4, random_state=42, n_init=10)
            df_ml['cluster'] = kmeans.fit_predict(X_encoded)
            
            st.write("Encontramos 4 perfis principais de usu√°rios. Veja a descri√ß√£o de cada um:")
            for i in range(4):
                st.write(f"**Perfil {i+1}:**")
                perfil_info = df_ml[df_ml['cluster'] == i].describe(include='object').loc['top']
                st.write(f"- **G√™nero/Pr√°tica:** {perfil_info['Pop_genero_pratica']}")
                st.write(f"- **Faixa Et√°ria:** {perfil_info['fetar']}")
                st.write(f"- **Ra√ßa/Cor:** {perfil_info['raca4_cat']}")
        except Exception as e:
            st.warning(f"N√£o foi poss√≠vel executar a an√°lise de clusteriza√ß√£o. Erro: {e}")

    with tab5:
        st.header("Gr√°ficos sobre HIV/AIDS no Brasil (Dados Nacionais)")
        st.info("Estes gr√°ficos s√£o baseados nos dados nacionais e n√£o s√£o afetados pelo filtro de estado.")
        df_aids = carregar_dados_hiv()
        if not df_aids.empty:
            try:
                # Gr√°fico 1: Evolu√ß√£o dos Casos
                tabela1 = df_aids.iloc[1:2, 3:15].T.reset_index()
                tabela1.columns = ['Ano', 'Novos Casos']
                tabela1['Ano'] = tabela1['Ano'].astype(str).str.replace('.0', '', regex=False)
                fig_casos = px.bar(tabela1, x='Ano', y='Novos Casos', title='Evolu√ß√£o dos Casos de AIDS no Brasil (2013-2023)')
                st.plotly_chart(fig_casos)
            except Exception:
                st.warning("N√£o foi poss√≠vel gerar o gr√°fico de 'Evolu√ß√£o dos Casos de AIDS'.")


# ======================= APLICA√á√ÉO PRINCIPAL =======================
def main():
    criar_banco()
    st.sidebar.title("Menu de Navega√ß√£o")
    menu = st.sidebar.radio("Escolha uma se√ß√£o:", ["In√≠cio", "Realizar Pesquisa", "An√°lise da Pesquisa", "Dados Oficiais"])

    if menu == "In√≠cio":
        pagina_inicio()
    elif menu == "Realizar Pesquisa":
        pagina_pesquisa()
    elif menu == "An√°lise da Pesquisa":
        pagina_analise_pesquisa()
    elif menu == "Dados Oficiais":
        pagina_dados_oficiais()

if __name__ == "__main__":
    main()

