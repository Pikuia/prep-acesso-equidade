#!/usr/bin/env python3
# simular_respostas.py - Gera respostas aleat√≥rias para o question√°rio PrEP

import random
import sqlite3
from datetime import datetime, timedelta
from database import salvar_resposta
import sys

def gerar_resposta_aleatoria():
    """Gera uma resposta aleat√≥ria focada em baixa renda e baixa escolaridade"""
    
    # Perfil focado em baixa renda e baixa escolaridade
    idades = ["18-24 anos", "25-29 anos", "30-34 anos", "35-39 anos", "40-49 anos"]
    
    generos = [
        "Homem cis (identifica-se com o g√™nero masculino atribu√≠do no nascimento)",
        "Mulher cis (identifica-se com o g√™nero feminino atribu√≠do no nascimento)",
        "Prefiro n√£o informar"
    ]
    
    orientacoes = [
        "Heterossexual (se atrai por pessoas do sexo oposto)",
        "Homossexual (se atrai por pessoas do mesmo sexo)", 
        "Bissexual (se atrai por ambos os sexos)",
        "Prefiro n√£o informar"
    ]
    
    racas = ["Parda", "Preta", "Branca", "Prefiro n√£o informar"]
    
    # Foco em baixa escolaridade
    escolaridades = ["Fundamental", "M√©dio", "Prefiro n√£o informar"]
    
    # Foco em baixa renda
    rendas = ["At√© 1 sal√°rio", "1-3 sal√°rios", "Prefiro n√£o informar"]
    
    status_relacionais = ["Solteiro", "Relacionamento exclusivo", "Relacionamento n√£o exclusivo", "Prefiro n√£o informar"]
    
    estados = ['SP', 'RJ', 'MG', 'BA', 'PE', 'CE', 'PA', 'MA', 'RS', 'PR', 'SC', 'GO', 'AM']
    
    # Maioria N√ÉO conhece PrEP (foco do perfil)
    conhecimento_prep = random.choices(["N√£o", "Sim"], weights=[75, 25])[0]
    
    # Se conhece, fonte limitada (sem muito acesso √† informa√ß√£o)
    fontes_info = []
    if conhecimento_prep == "Sim":
        opcoes_fonte = ["Amigos", "Redes sociais", "Profissional de sa√∫de"]
        fontes_info = random.sample(opcoes_fonte, random.randint(1, 2))
    
    # Maioria n√£o sabe onde encontrar
    acesso = random.choices(["N√£o", "Sim"], weights=[70, 30])[0]
    
    # Uso da PrEP - maioria nunca usou
    usos = ["Nunca usei", "Nunca usei e n√£o quero", "N√£o sei se preciso", "Nunca usei mas quero"]
    uso = random.choices(usos, weights=[40, 20, 25, 15])[0]
    
    objetivos = [
        "Preven√ß√£o cont√≠nua",
        "Curiosidade/avalia√ß√£o", 
        "Situa√ß√µes espec√≠ficas (viagem, parceiro novo)",
        "Outro"
    ]
    objetivo_prep = random.choice(objetivos)
    
    # Efeitos colaterais - NA para quem nunca usou
    efeitos_colaterais_teve = "N√£o se aplica"
    efeitos_colaterais_quais = ""
    
    if uso in ["Uso atualmente", "J√° usei"]:
        efeitos_colaterais_teve = random.choice(["N√£o", "Sim", "N√£o tenho certeza"])
        if efeitos_colaterais_teve == "Sim":
            efeitos_lista = ["N√°usea", "Dor de cabe√ßa", "Tontura", "Cansa√ßo"]
            efeitos_colaterais_quais = ", ".join(random.sample(efeitos_lista, random.randint(1, 2)))
    
    # Barreiras - pessoas com baixa escolaridade/renda
    barreiras_opcoes = [
        "N√£o acho que preciso",
        "Falta de informa√ß√£o", 
        "Dificuldade de acesso",
        "Vergonha",
        "Medo de efeitos"
    ]
    barreiras = random.sample(barreiras_opcoes, random.randint(2, 4))
    
    # Percep√ß√£o de risco - geralmente baixa por falta de informa√ß√£o
    percepcao_risco = random.choices(range(11), weights=[15, 20, 20, 15, 10, 8, 5, 3, 2, 1, 1])[0]
    
    # Coment√°rios t√≠picos do perfil
    comentarios_opcoes = [
        "",
        "N√£o sabia que existia essa medica√ß√£o",
        "Preciso saber mais sobre isso",
        "Onde posso conseguir mais informa√ß√µes?",
        "√â caro?",
        "Tem no posto de sa√∫de?",
        "Nunca ouvi falar",
        "Meu m√©dico nunca comentou",
        "√â seguro?",
        "Como funciona?"
    ]
    comentarios = random.choice(comentarios_opcoes)
    
    resposta = {
        'idade': random.choice(idades),
        'genero': random.choice(generos),
        'orientacao_sexual': random.choice(orientacoes),
        'raca': random.choice(racas),
        'escolaridade': random.choice(escolaridades),
        'renda': random.choice(rendas),
        'regiao': random.choice(estados),
        'status_relacional': random.choice(status_relacionais),
        'conhecimento_prep': conhecimento_prep,
        'uso_prep': uso,
        'objetivo_prep': objetivo_prep,
        'acesso_servico': acesso,
        'fonte_info': ", ".join(fontes_info),
        'barreiras': ", ".join(barreiras),
        'percepcao_risco': percepcao_risco,
        'efeitos_colaterais_teve': efeitos_colaterais_teve,
        'efeitos_colaterais_quais': efeitos_colaterais_quais,
        'comentarios': comentarios
    }
    
    return resposta

def simular_respostas(quantidade=50):
    """Simula m√∫ltiplas respostas"""
    print(f"üé≤ Gerando {quantidade} respostas aleat√≥rias...")
    print("Perfil: Baixa renda, baixa escolaridade, pouco conhecimento sobre PrEP")
    print("-" * 60)
    
    sucessos = 0
    erros = 0
    
    for i in range(quantidade):
        try:
            resposta = gerar_resposta_aleatoria()
            
            # Salvar diretamente no banco (sem usar Streamlit)
            conn = sqlite3.connect('pesquisa_prep.db')
            cursor = conn.cursor()
            
            cursor.execute('''
            INSERT INTO respostas 
            (idade, genero, orientacao_sexual, raca, escolaridade, renda, regiao, status_relacional,
             conhecimento_prep, uso_prep, objetivo_prep, acesso_servico, fonte_info, barreiras, 
             percepcao_risco, efeitos_colaterais_teve, efeitos_colaterais_quais, comentarios)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', tuple(resposta.values()))
            
            conn.commit()
            conn.close()
            
            sucessos += 1
            
            # Mostrar progresso
            if (i + 1) % 10 == 0:
                print(f"‚úÖ {i + 1}/{quantidade} respostas geradas")
                
        except Exception as e:
            erros += 1
            print(f"‚ùå Erro na resposta {i + 1}: {e}")
    
    print("-" * 60)
    print(f"‚úÖ Simula√ß√£o conclu√≠da!")
    print(f"   Sucessos: {sucessos}")
    print(f"   Erros: {erros}")
    
    # Mostrar total atual
    try:
        conn = sqlite3.connect('pesquisa_prep.db')
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM respostas")
        total = cursor.fetchone()[0]
        conn.close()
        print(f"   Total no banco: {total}")
    except Exception as e:
        print(f"   Erro ao contar total: {e}")
    
    # Fazer backup ap√≥s simula√ß√£o
    try:
        from backup_manager import BackupManager
        backup_manager = BackupManager()
        resultado = backup_manager.backup_completo()
        print(f"üì¶ Backup realizado: {resultado['timestamp']}")
    except Exception as e:
        print(f"‚ö†Ô∏è  Erro no backup: {e}")

def mostrar_estatisticas():
    """Mostra estat√≠sticas das respostas simuladas"""
    try:
        conn = sqlite3.connect('pesquisa_prep.db')
        cursor = conn.cursor()
        
        print("\nüìä Estat√≠sticas das Respostas:")
        print("-" * 40)
        
        # Total
        cursor.execute("SELECT COUNT(*) FROM respostas")
        total = cursor.fetchone()[0]
        print(f"Total de respostas: {total}")
        
        # Conhecimento PrEP
        cursor.execute("SELECT conhecimento_prep, COUNT(*) FROM respostas GROUP BY conhecimento_prep")
        print("\nConhecimento sobre PrEP:")
        for conhecimento, count in cursor.fetchall():
            print(f"  {conhecimento}: {count}")
        
        # Escolaridade
        cursor.execute("SELECT escolaridade, COUNT(*) FROM respostas GROUP BY escolaridade")
        print("\nEscolaridade:")
        for escolaridade, count in cursor.fetchall():
            print(f"  {escolaridade}: {count}")
        
        # Renda
        cursor.execute("SELECT renda, COUNT(*) FROM respostas GROUP BY renda")
        print("\nRenda:")
        for renda, count in cursor.fetchall():
            print(f"  {renda}: {count}")
        
        conn.close()
        
    except Exception as e:
        print(f"Erro ao mostrar estat√≠sticas: {e}")

if __name__ == "__main__":
    # Verificar argumentos
    quantidade = 50
    if len(sys.argv) > 1:
        try:
            quantidade = int(sys.argv[1])
        except ValueError:
            print("Uso: python simular_respostas.py [quantidade]")
            sys.exit(1)
    
    # Criar tabela se n√£o existir
    from database import criar_tabela_respostas
    criar_tabela_respostas()
    
    # Simular respostas
    simular_respostas(quantidade)
    
    # Mostrar estat√≠sticas
    mostrar_estatisticas()