# -*- coding: utf-8 -*-
"""
PrEP - An√°lise Inteligente de Dados
Vers√£o Final com Dados Integrados, Pesquisa e An√°lise de Machine Learning.
"""
import streamlit as st
import pandas as pd
import sqlite3
import plotly.express as px
import plotly.graph_objects as go
import warnings
from pathlib import Path
from sklearn.cluster import KMeans
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import OneHotEncoder
from sklearn.impute import SimpleImputer
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline


warnings.filterwarnings('ignore')

# ======================= CONFIGURA√á√ÉO DA P√ÅGINA =======================
st.set_page_config(page_title="PrEP - Pesquisa Inteligente", page_icon="‚ù§Ô∏è", layout="wide")

# ======================= BANCO DE DADOS PARA A PESQUISA =======================
def criar_banco():
    """Cria o banco de dados SQLite e a tabela de respostas se n√£o existirem."""
    conn = sqlite3.connect('pesquisa_prep.db')
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS respostas (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        data TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        idade TEXT,
        genero TEXT,
        orientacao_sexual TEXT,
        raca TEXT,
        escolaridade TEXT,
        renda TEXT,
        regiao TEXT,
        conhecimento_prep TEXT,
        uso_prep TEXT,
        acesso_servico TEXT,
        fonte_info TEXT,
        barreiras TEXT,
        percepcao_risco TEXT,
        comentarios TEXT
    )
    ''')
    conn.commit()
    conn.close()

def salvar_resposta(resposta):
    """Salva uma nova resposta da pesquisa no banco de dados."""
    conn = sqlite3.connect('pesquisa_prep.db')
    cursor = conn.cursor()
    cursor.execute('''
    INSERT INTO respostas 
    (idade, genero, orientacao_sexual, raca, escolaridade, renda, regiao, 
     conhecimento_prep, uso_prep, acesso_servico, fonte_info, barreiras, percepcao_risco, comentarios)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', tuple(resposta.values()))
    conn.commit()
    conn.close()

# ======================= CARREGAMENTO DOS DADOS (CSV E EXCEL) =======================
@st.cache_data
def carregar_dados_iniciais():
    """Carrega todos os arquivos de dados (CSV e Excel) da pasta 'data'."""
    data_path = Path('data')
    try:
        # Carrega dados de usu√°rios PrEP
        df_usuarios = pd.read_csv(data_path / 'Banco_PrEP_usuarios.csv', encoding='latin1', sep=',')
        
        # Carrega o arquivo de dispensas √∫nico e grande
        df_dispensas = pd.read_csv(data_path / 'Banco_PrEP_dispensas.csv', encoding='latin1', sep=',')
        
        # Carrega dados de indicadores de AIDS do Excel
        df_indicadores = pd.read_excel(data_path / 'indicadoresAids.xls', sheet_name=None, header=None)
        
        return df_usuarios, df_dispensas, df_indicadores
    except FileNotFoundError:
        st.error(
            "Erro: Arquivos de dados n√£o encontrados. "
            "Certifique-se de que a pasta 'data' existe e cont√©m os arquivos: "
            "'Banco_PrEP_usuarios.csv', 'Banco_PrEP_dispensas.csv', e 'indicadoresAids.xls'."
        )
        return pd.DataFrame(), pd.DataFrame(), None
    except Exception as e:
        st.error(f"Ocorreu um erro inesperado ao carregar os dados: {e}")
        return pd.DataFrame(), pd.DataFrame(), None

# ======================= FUN√á√ïES DE MACHINE LEARNING =======================
@st.cache_data
def analise_avancada_publico(df_usuarios):
    """Executa an√°lises de Machine Learning (Clusteriza√ß√£o e Feature Importance) nos dados p√∫blicos."""
    st.header("ü§ñ An√°lise Avan√ßada com Machine Learning")
    
    # 1. AN√ÅLISE DE PERFIS (CLUSTERIZA√á√ÉO)
    st.subheader("1. Identifica√ß√£o de Perfis de Usu√°rios (Clusteriza√ß√£o)")
    st.markdown("""
    Utilizamos um algoritmo de Machine Learning (*K-Means*) para agrupar os usu√°rios em perfis (clusters) com caracter√≠sticas semelhantes. 
    Isso nos ajuda a entender melhor os diferentes grupos que utilizam a PrEP.
    """)

    # Selecionar e preparar os dados para clusteriza√ß√£o
    features_cluster = ['raca4_cat', 'escol4', 'fetar', 'Pop_genero_pratica', 'UF_UDM']
    df_cluster = df_usuarios[features_cluster].dropna()

    if df_cluster.empty:
        st.warning("N√£o h√° dados suficientes para a an√°lise de perfis.")
        return

    # Pipeline de pr√©-processamento
    preprocessor = ColumnTransformer(
        transformers=[('cat', OneHotEncoder(handle_unknown='ignore'), features_cluster)],
        remainder='passthrough'
    )
    
    pipeline = Pipeline(steps=[('preprocessor', preprocessor)])
    X_processed = pipeline.fit_transform(df_cluster)
    
    # Executar K-Means
    kmeans = KMeans(n_clusters=4, random_state=42, n_init=10)
    df_cluster['perfil'] = kmeans.fit_predict(X_processed)
    
    st.success("Encontramos 4 perfis principais de usu√°rios. Veja a descri√ß√£o de cada um:")
    
    for i in range(4):
        st.markdown(f"---")
        st.markdown(f"#### Perfil {i+1}")
        perfil_df = df_cluster[df_cluster['perfil'] == i]
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**Popula√ß√£o/G√™nero:**")
            st.dataframe(perfil_df['Pop_genero_pratica'].value_counts().head(3))
            st.write("**Faixa Et√°ria:**")
            st.dataframe(perfil_df['fetar'].value_counts().head(3))

        with col2:
            st.write("**Estado (UF):**")
            st.dataframe(perfil_df['UF_UDM'].value_counts().head(3))
            st.write("**Escolaridade:**")
            st.dataframe(perfil_df['escol4'].value_counts().head(3))

    # 2. FATORES DE RETEN√á√ÉO (FEATURE IMPORTANCE)
    st.subheader("2. Fatores Chave para a Reten√ß√£o de Usu√°rios")
    st.markdown("""
    Aqui, usamos outro modelo (*Random Forest*) para prever se um usu√°rio continuou no programa em 2024. 
    O gr√°fico abaixo mostra quais caracter√≠sticas (idade, ra√ßa, etc.) s√£o mais importantes para essa previs√£o.
    """)

    # Preparar dados
    features_retencao = ['raca4_cat', 'escol4', 'fetar', 'Pop_genero_pratica', 'UF_UDM']
    target_retencao = 'Disp_12m_2024'
    df_retencao = df_usuarios[features_retencao + [target_retencao]].dropna()
    df_retencao = df_retencao[df_retencao[target_retencao] != 'nan']


    if df_retencao.empty or df_retencao[target_retencao].nunique() < 2:
        st.warning("N√£o h√° dados suficientes para a an√°lise de reten√ß√£o.")
        return
        
    X = df_retencao[features_retencao]
    y = (df_retencao[target_retencao] == 'Teve dispensa√É¬ß√É¬£o em 2024').astype(int)

    # Pipeline de pr√©-processamento para o modelo
    cat_features = X.select_dtypes(include=['object']).columns
    preprocessor_rf = ColumnTransformer(
        transformers=[
            ('cat', OneHotEncoder(handle_unknown='ignore'), cat_features)
        ],
        remainder='passthrough'
    )
    
    # Modelo
    rf_pipeline = Pipeline(steps=[
        ('preprocessor', preprocessor_rf),
        ('classifier', RandomForestClassifier(random_state=42))
    ])
    
    rf_pipeline.fit(X, y)
    
    # Extrair e exibir a import√¢ncia das features
    feature_names = rf_pipeline.named_steps['preprocessor'].get_feature_names_out()
    importances = rf_pipeline.named_steps['classifier'].feature_importances_
    
    feature_importance_df = pd.DataFrame({'feature': feature_names, 'importance': importances})
    feature_importance_df = feature_importance_df.sort_values('importance', ascending=False).head(15)

    fig = px.bar(feature_importance_df, x='importance', y='feature', orientation='h', title='Top 15 Fatores que Influenciam a Reten√ß√£o')
    st.plotly_chart(fig, use_container_width=True)

# ======================= INTERFACE DO APP =======================

def mostrar_termo_consentimento():
    """Exibe o termo de consentimento e gerencia a aceita√ß√£o."""
    st.header("Termo de Consentimento Livre e Esclarecido")
    
    try:
        with open("termo_consentimento.md", "r", encoding="utf-8") as f:
            termo_texto = f.read()
        st.markdown(termo_texto, unsafe_allow_html=True)
    except FileNotFoundError:
        st.error("Arquivo 'termo_consentimento.md' n√£o encontrado.")
        return

    st.markdown("---")
    
    col1, col2 = st.columns(2)
    with col1:
        if st.button("‚úÖ Aceito e quero participar da pesquisa"):
            st.session_state.termo_aceito = True
            st.rerun()
    with col2:
        if st.button("‚ùå N√£o aceito"):
            st.info("Obrigado pelo seu interesse. Voc√™ pode fechar esta p√°gina.")
            st.stop()

def mostrar_pesquisa():
    """Exibe o formul√°rio da pesquisa."""
    st.header("üìù Pesquisa - Conhecimento sobre PrEP/PEP")
    st.markdown("Por favor, responda √†s perguntas abaixo. Suas respostas s√£o an√¥nimas e muito importantes.")

    with st.form("formulario_pesquisa"):
        st.subheader("1. Perfil Demogr√°fico")
        idade = st.selectbox("Qual sua faixa et√°ria?", ["18-24 anos", "25-34 anos", "35-44 anos", "45-54 anos", "55 anos ou mais"])
        genero = st.selectbox("Com qual g√™nero voc√™ se identifica?", ["Homem Cis", "Mulher Cis", "Homem Trans", "Mulher Trans", "N√£o-bin√°rio", "Prefiro n√£o informar"])
        raca = st.selectbox("Como voc√™ se autodeclara em rela√ß√£o √† ra√ßa/cor?", ["Branca", "Preta", "Parda", "Amarela", "Ind√≠gena", "Prefiro n√£o informar"])
        escolaridade = st.selectbox("Qual seu n√≠vel de escolaridade?", ["Ensino Fundamental", "Ensino M√©dio", "Ensino Superior", "P√≥s-gradua√ß√£o"])
        renda = st.selectbox("Qual sua renda familiar mensal?", ["At√© 1 sal√°rio m√≠nimo", "De 1 a 3 sal√°rios", "De 3 a 5 sal√°rios", "Acima de 5 sal√°rios"])

        st.subheader("2. Conhecimento e Acesso √† PrEP")
        conhecimento = st.radio("Voc√™ j√° ouviu falar sobre a PrEP (Profilaxia Pr√©-Exposi√ß√£o ao HIV)?", ["Sim, conhe√ßo bem", "J√° ouvi falar, mas sei pouco", "Nunca ouvi falar"])
        fonte_info = st.selectbox("Onde voc√™ ouviu falar sobre PrEP pela primeira vez?", ["Profissional de sa√∫de (m√©dico, enfermeiro)", "Amigos ou parceiro(a)", "Redes sociais (Instagram, TikTok, etc.)", "Sites de not√≠cias ou blogs", "Campanhas do governo", "Outro"])
        acesso = st.radio("Voc√™ sabe onde encontrar a PrEP gratuitamente pelo SUS?", ["Sim", "N√£o", "Tenho uma ideia, mas n√£o tenho certeza"])
        
        st.subheader("3. Uso e Percep√ß√µes")
        uso = st.radio("Voc√™ j√° fez uso da PrEP?", ["Sim, uso atualmente", "J√° usei no passado", "Nunca usei, mas tenho interesse", "Nunca usei e n√£o tenho interesse"])
        barreiras = st.multiselect("Se voc√™ nunca usou ou parou de usar, qual foi o principal motivo? (Pode marcar mais de um)", ["N√£o acho que preciso", "Preocupa√ß√£o com efeitos colaterais", "Dificuldade de conseguir consulta ou receita", "Vergonha ou estigma", "Esque√ßo de tomar o rem√©dio todo dia", "N√£o se aplica a mim"])
        percepcao_risco = st.radio("Em sua opini√£o, qual o seu risco de se expor ao HIV hoje?", ["Alto", "M√©dio", "Baixo", "Nenhum", "N√£o sei avaliar"])

        comentarios = st.text_area("Se quiser, deixe um coment√°rio, d√∫vida ou sugest√£o:")

        if st.form_submit_button("üöÄ Enviar Minhas Respostas"):
            resposta = {
                'idade': idade, 'genero': genero, 'orientacao_sexual': 'N/A', 'raca': raca,
                'escolaridade': escolaridade, 'renda': renda, 'regiao': "Brasil",
                'conhecimento_prep': conhecimento, 'uso_prep': uso, 'acesso_servico': acesso,
                'fonte_info': fonte_info, 'barreiras': ", ".join(barreiras), 'percepcao_risco': percepcao_risco,
                'comentarios': comentarios
            }
            salvar_resposta(resposta)
            st.success("‚úÖ Resposta enviada com sucesso! Muito obrigado por sua contribui√ß√£o.")
            st.balloons()

def analise_com_machine_learning():
    """Exibe as an√°lises dos dados coletados na pesquisa."""
    st.header("ü§ñ An√°lise dos Dados da Pesquisa (Resultados em Tempo Real)")
    st.markdown("Aqui vemos os perfis dos participantes e suas respostas de forma visual.")

    conn = sqlite3.connect('pesquisa_prep.db')
    try:
        df_respostas = pd.read_sql_query("SELECT * FROM respostas", conn)
    finally:
        conn.close()

    if df_respostas.empty:
        st.warning("Ainda n√£o h√° respostas para analisar. Participe da pesquisa!")
        return

    st.metric("Total de Respostas Coletadas", len(df_respostas))

    st.subheader("Recorte por Perfil Demogr√°fico")
    col1, col2 = st.columns(2)
    with col1:
        fig_idade = px.pie(df_respostas, names='idade', title='Distribui√ß√£o por Idade', hole=.3)
        st.plotly_chart(fig_idade, use_container_width=True)
        
        fig_raca = px.bar(df_respostas['raca'].value_counts().reset_index(), x='raca', y='count', title='Distribui√ß√£o por Ra√ßa/Cor', labels={'raca': 'Ra√ßa/Cor', 'count': 'Quantidade'})
        st.plotly_chart(fig_raca, use_container_width=True)
    with col2:
        fig_genero = px.pie(df_respostas, names='genero', title='Distribui√ß√£o por G√™nero', hole=.3)
        st.plotly_chart(fig_genero, use_container_width=True)

        fig_escolaridade = px.bar(df_respostas['escolaridade'].value_counts().reset_index(), x='escolaridade', y='count', title='Distribui√ß√£o por Escolaridade', labels={'escolaridade': 'Escolaridade', 'count': 'Quantidade'})
        st.plotly_chart(fig_escolaridade, use_container_width=True)

    st.subheader("An√°lise sobre Conhecimento e Acesso √† PrEP")
    col1, col2 = st.columns(2)
    with col1:
        fig_conhecimento = px.pie(df_respostas, names='conhecimento_prep', title='Conhecimento sobre a PrEP', hole=.3)
        st.plotly_chart(fig_conhecimento, use_container_width=True)
    with col2:
        fig_acesso = px.pie(df_respostas, names='acesso_servico', title='Sabe onde obter PrEP?', hole=.3)
        st.plotly_chart(fig_acesso, use_container_width=True)

    st.subheader("Fontes de Informa√ß√£o e Percep√ß√£o de Risco")
    col3, col4 = st.columns(2)
    with col3:
        fig_fonte = px.bar(df_respostas['fonte_info'].value_counts().reset_index(), x='fonte_info', y='count', title='Principal Fonte de Informa√ß√£o sobre PrEP')
        st.plotly_chart(fig_fonte, use_container_width=True)
    with col4:
        fig_risco = px.pie(df_respostas, names='percepcao_risco', title='Autopercep√ß√£o de Risco de Exposi√ß√£o ao HIV', hole=.3)
        st.plotly_chart(fig_risco, use_container_width=True)
    
    with st.expander("Ver dados brutos da pesquisa"):
        st.dataframe(df_respostas)


def mostrar_dados_oficiais():
    """Exibe os dados pr√©-carregados dos arquivos CSV e Excel com an√°lises detalhadas."""
    st.header("üìä Dados Oficiais sobre PrEP e HIV/AIDS no Brasil")
    
    df_usuarios, df_dispensas, df_indicadores = carregar_dados_iniciais()

    if df_usuarios.empty and df_dispensas.empty and df_indicadores is None:
        return 

    st.markdown("---")
    st.info("üí° Use o filtro abaixo para visualizar os dados de usu√°rios e dispensas apenas do estado de S√£o Paulo.")
    filtro_sp = st.toggle("Mostrar apenas dados de S√£o Paulo (SP)", help="Ative para filtrar os dados da PrEP para o estado de SP.")

    df_usuarios_filtrado = df_usuarios.copy()
    df_dispensas_filtrado = df_dispensas.copy()

    if filtro_sp:
        if 'UF_UDM' in df_usuarios.columns:
            df_usuarios_filtrado = df_usuarios[df_usuarios['UF_UDM'] == 'SP']
        if 'UF_UDM' in df_dispensas.columns:
            df_dispensas_filtrado = df_dispensas[df_dispensas['UF_UDM'] == 'SP']
        st.success(f"Filtro aplicado! Mostrando dados de S√£o Paulo.")

    tab1, tab2, tab3, tab4 = st.tabs([
        "üë§ Perfil dos Usu√°rios de PrEP", 
        "üíä Dispensas de PrEP", 
        "ü§ñ An√°lise Avan√ßada (ML)", 
        "üìà Indicadores Nacionais de AIDS"
    ])

    with tab1:
        st.subheader("An√°lise Detalhada do Perfil dos Usu√°rios de PrEP")
        if not df_usuarios_filtrado.empty:
            st.dataframe(df_usuarios_filtrado.head(100))
            
            col1, col2 = st.columns(2)
            with col1:
                st.write("**Perfil por Ra√ßa/Cor**")
                fig_raca = px.pie(df_usuarios_filtrado, names='raca4_cat', title="Ra√ßa/Cor", hole=.3)
                st.plotly_chart(fig_raca, use_container_width=True)

                st.write("**Perfil por Escolaridade**")
                fig_esc = px.bar(df_usuarios_filtrado['escol4'].value_counts().reset_index(), x='escol4', y='count', title="Escolaridade")
                st.plotly_chart(fig_esc, use_container_width=True)
            with col2:
                st.write("**Perfil por Faixa Et√°ria**")
                fig_idade = px.pie(df_usuarios_filtrado, names='fetar', title="Faixa Et√°ria", hole=.3)
                st.plotly_chart(fig_idade, use_container_width=True)

                st.write("**Perfil por Popula√ß√£o/G√™nero**")
                fig_pop = px.bar(df_usuarios_filtrado['Pop_genero_pratica'].value_counts().reset_index(), x='Pop_genero_pratica', y='count', title="Popula√ß√£o/G√™nero")
                st.plotly_chart(fig_pop, use_container_width=True)
        else:
            st.warning("N√£o foram encontrados dados de usu√°rios para a sele√ß√£o atual.")

    with tab2:
        st.subheader("An√°lise Detalhada das Dispensas de PrEP")
        if not df_dispensas_filtrado.empty:
            st.info("A tabela abaixo exibe uma amostra. Os gr√°ficos s√£o calculados sobre o total de dados.")
            st.dataframe(df_dispensas_filtrado.head(100))
            
            df_dispensas_filtrado['dt_disp'] = pd.to_datetime(df_dispensas_filtrado['dt_disp'], errors='coerce')
            disp_por_mes = df_dispensas_filtrado.set_index('dt_disp').resample('M').size().reset_index(name='count')

            st.write("**Dispensas de PrEP ao longo do tempo**")
            fig_tempo = px.line(disp_por_mes, x='dt_disp', y='count', title='Evolu√ß√£o Mensal das Dispensas de PrEP')
            st.plotly_chart(fig_tempo, use_container_width=True)

            col1, col2 = st.columns(2)
            with col1:
                st.write("**Tipo de Servi√ßo de Atendimento**")
                fig_serv = px.pie(df_dispensas_filtrado, names='tp_servico_atendimento', title="Servi√ßo", hole=.3)
                st.plotly_chart(fig_serv, use_container_width=True)
            with col2:
                st.write("**Tipo de Profissional**")
                fig_prof = px.pie(df_dispensas_filtrado, names='tp_profissional', title="Profissional", hole=.3)
                st.plotly_chart(fig_prof, use_container_width=True)
        else:
            st.warning("N√£o foram encontrados dados de dispensas para a sele√ß√£o atual.")
            
    with tab3:
        if not df_usuarios_filtrado.empty:
            analise_avancada_publico(df_usuarios_filtrado)
        else:
            st.warning("N√£o h√° dados de usu√°rios para realizar a an√°lise avan√ßada. Desative o filtro de SP se necess√°rio.")

    with tab4:
        st.subheader("Indicadores de HIV/AIDS (Minist√©rio da Sa√∫de)")
        if df_indicadores:
            st.info("Estes s√£o os dados extra√≠dos do arquivo 'indicadoresAids.xls'.")
            for sheet_name, df_sheet in df_indicadores.items():
                with st.expander(f"Visualizar Tabela: {sheet_name}"):
                    df_cleaned = df_sheet.dropna(how='all').dropna(axis=1, how='all')
                    st.dataframe(df_cleaned)
        else:
            st.warning("N√£o foi poss√≠vel carregar os dados dos indicadores.")

# ======================= FUN√á√ÉO PRINCIPAL =======================
def main():
    """Fun√ß√£o principal que executa o aplicativo Streamlit."""
    st.title("‚ù§Ô∏è Plataforma de Pesquisa e An√°lise sobre PrEP")

    if 'termo_aceito' not in st.session_state:
        st.session_state.termo_aceito = False

    if not st.session_state.termo_aceito:
        mostrar_termo_consentimento()
        return

    st.sidebar.success("Termo de consentimento aceito! ‚úÖ")
    st.sidebar.title("Menu de Navega√ß√£o")
    menu = st.sidebar.radio(
        "Escolha uma se√ß√£o:",
        ("üè† In√≠cio", "üìù Realizar Pesquisa", "ü§ñ An√°lise da Pesquisa", "üìä Dados Oficiais")
    )
    
    criar_banco()

    if menu == "üè† In√≠cio":
        st.header("Bem-vindo(a) √† Plataforma!")
        st.markdown("""
        Esta √© uma ferramenta para coletar e analisar dados sobre o conhecimento e acesso √† PrEP no Brasil. 
        Sua participa√ß√£o √© fundamental para entendermos o cen√°rio atual e ajudarmos a aprimorar as pol√≠ticas de sa√∫de.

        ### Como funciona?
        - **Realizar Pesquisa:** Participe do nosso question√°rio an√¥nimo. Leva menos de 5 minutos!
        - **An√°lise da Pesquisa:** Veja os resultados da pesquisa em tempo real, com gr√°ficos interativos que mostram o perfil dos participantes.
        - **Dados Oficiais:** Explore os dados p√∫blicos do Minist√©rio da Sa√∫de sobre o uso de PrEP e os indicadores de HIV/AIDS no pa√≠s.

        Use o menu na barra lateral para navegar entre as se√ß√µes.
        """)
        st.image("https://placehold.co/800x300/E8D5C4/65451F?text=Sa%C3%BAde+%C3%A9+Preven%C3%A7%C3%A3o", caption="A informa√ß√£o √© a melhor ferramenta de preven√ß√£o.")

    elif menu == "üìù Realizar Pesquisa":
        mostrar_pesquisa()

    elif menu == "ü§ñ An√°lise da Pesquisa":
        analise_com_machine_learning()

    elif menu == "üìä Dados Oficiais":
        mostrar_dados_oficiais()

if __name__ == "__main__":
    main()

